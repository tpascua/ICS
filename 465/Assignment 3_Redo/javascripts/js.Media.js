// Generated by CoffeeScript 1.8.0
(function() {
  if (window.js == null) {
    window.js = {};
  }

  window.js.Media = (function() {
    function Media(element) {
      var border;
      this.element = element;
      this.top(Math.round(js.Css.css(this.element, 'top')));
      this.left(Math.round(js.Css.css(this.element, 'left')));
      this.width(Math.round(this.element.width()));
      this.height(Math.round(this.element.height()));
      border = {
        width: js.Css.css(this.element, 'border-width'),
        color: js.Css.css(this.element, 'border-color')
      };
      this.border(border);
      this.margin(js.Css.css(this.element, 'margin'));
      this.padding(js.Css.css(this.element, 'padding'));
      this.link('');
    }

    Media.prototype.top = function(top_) {
      if (top_ != null) {
        this.top_ = top_;
        js.Css.css(this.element, 'top', this.top_);
        return this;
      } else {
        return this.top_;
      }
    };

    Media.prototype.left = function(left_) {
      if (left_ != null) {
        this.left_ = left_;
        js.Css.css(this.element, 'left', this.left_);
        return this;
      } else {
        return this.left_;
      }
    };

    Media.prototype.width = function(width_) {
      if (width_ != null) {
        this.width_ = width_;
        this.element.width(this.width_);
        return this;
      } else {
        return this.width_;
      }
    };

    Media.prototype.height = function(height_) {
      if (height_ != null) {
        this.height_ = height_;
        this.element.height(this.height_);
        return this;
      } else {
        return this.height_;
      }
    };

    Media.prototype.border = function(border) {
      if (border != null) {
        this.border_ = border;
        log("" + this + " set border", border, '  ');
        js.Css.css(this.element, 'border-width', border.width);
        js.Css.css(this.element, 'border-color', border.color);
        return this;
      } else {
        return this.border_;
      }
    };

    Media.prototype.margin = function(margin) {
      if (margin != null) {
        this.margin_ = margin;
        js.Css.css(this.element, 'margin', margin);
        return this;
      } else {
        return this.margin_;
      }
    };

    Media.prototype.padding = function(padding_) {
      if (padding_ != null) {
        this.padding_ = padding_;
        js.Css.css(this.element, 'padding', this.padding_);
        return this;
      } else {
        return this.padding_;
      }
    };

    Media.prototype.link = function(link_) {
      if (link_ != null) {
        link_ = link_.trim();
        if (link_ === "") {
          link_ = null;
        }
        this.link_ = link_;
        if (this.link_ != null) {
          this.element.click((function(_this) {
            return function() {
              return window.location = _this.link_;
            };
          })(this));
        } else {
          this.element.click(function() {});
        }
        return this;
      } else {
        return this.link_;
      }
    };

    return Media;

  })();

}).call(this);
