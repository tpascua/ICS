// Generated by CoffeeScript 1.8.0
(function() {
  if (window.js == null) {
    window.js = {};
  }

  window.js.Script = (function() {
    function Script() {}

    Script.load = function(modules, namespace) {
      var empty, loadScript, need, needs, onFail, onNext, scheduled, _, _i, _len;
      if (namespace != null) {
        if ('.' !== namespace[length - 1]) {
          namespace += '.';
        }
      } else {
        namespace = '';
      }
      scheduled = {};
      onNext = function(loaded) {
        var i, module, need, needs, remaining, _, _i, _j, _len, _len1;
        if (loaded != null) {
          delete modules[loaded];
          delete scheduled[loaded];
          for (_ in modules) {
            needs = modules[_];
            for (i = _i = 0, _len = needs.length; _i < _len; i = ++_i) {
              need = needs[i];
              if (need === loaded) {
                needs.splice(i, 1);
              }
            }
          }
        }
        for (module in modules) {
          needs = modules[module];
          if (!((scheduled[module] != null) || (needs.length > 0))) {
            scheduled[module] = module;
            $.when(loadScript(module)).done(onNext).fail(onFail);
          }
        }
        if (empty(scheduled) && (modules.length > 0)) {
          remaining = [];
          for (_j = 0, _len1 = modules.length; _j < _len1; _j++) {
            module = modules[_j];
            remaining.push(module);
          }
          return alert("Can't load module(s) '" + (remaining.join(', ')) + "' because of circular dependencies");
        }
      };
      loadScript = function(module) {
        var onReady, path, result, script;
        result = $.Deferred();
        onReady = function(_, isAbort) {
          if (!script.readyState || /loaded|complete/.test(script.readyState)) {
            if (isAbort) {
              return result.reject(module);
            } else {
              return result.resolve(module);
            }
          }
        };
        path = "./javascripts/" + namespace + module + ".js";
        script = $('<script>').prop({
          type: 'text/javascript',
          src: path,
          async: 'async'
        });
        script.on('load', onReady).on('readystatechange', onReady).on('error', function() {
          return result.reject(module);
        });
        $('head')[0].appendChild(script[0]);
        return result.promise();
      };
      onFail = function(module) {
        return alert("Module '" + module + "' couldn't be loaded");
      };
      empty = function(object) {
        var key;
        for (key in object) {
          return false;
        }
        return true;
      };
      for (_ in modules) {
        needs = modules[_];
        for (_i = 0, _len = needs.length; _i < _len; _i++) {
          need = needs[_i];
          if (modules[need] == null) {
            modules[need] = [];
          }
        }
      }
      return onNext();
    };

    return Script;

  })();

}).call(this);
