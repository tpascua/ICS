// Generated by CoffeeScript 1.8.0
(function() {
  if (window.js == null) {
    window.js = {};
  }

  window.js.Dom = (function() {
    function Dom() {}

    Dom.areaKeys = ['top', 'left', 'width', 'height'];

    Dom.arounds = ['top', 'left', 'bottom', 'right'];

    Dom.dom = function(ids) {
      return js.Support.filled(ids, function(id) {
        return $("#" + id);
      });
    };

    return Dom;

  })();

  window.js.Support = (function() {
    var text, texts, _i, _len;

    function Support() {}

    Support.keys = {
      enter: 13,
      escape: 27
    };

    Support.pressed = function(event, id) {
      return event.which === js.Support.keys[id];
    };

    Support.parse = function(string, keys) {
      var equivalent, index, key, keys_, object, pattern, piece, pieces, separator, value, _i, _j, _len, _len1, _ref;
      equivalent = function(key) {
        var key_, _i, _len;
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key_ = keys[_i];
          if (key_.startsWith(key)) {
            return key_;
          }
        }
        return key_;
      };
      keys_ = [];
      string = string.trim().replace(/\s+/g, ' ').replace(/[ ]*([:,;()'\"]) */g, '$1');
      pieces = string.replace(/\((.*?)\)/g, '\n($1)\n').split('\n');
      for (index = _i = 0, _len = pieces.length; _i < _len; index = ++_i) {
        piece = pieces[index];
        separator = (index % 2) === 0 ? ';' : ',';
        pieces[index] = piece.replace(/[ ,;]/g, separator);
      }
      string = pieces.join('');
      pieces = string.split(';');
      pattern = /([\w-]+?):/g;
      if (pattern.test(pieces[0])) {
        object = {};
        for (_j = 0, _len1 = pieces.length; _j < _len1; _j++) {
          piece = pieces[_j];
          _ref = piece.split(':', 2), key = _ref[0], value = _ref[1];
          object[key] = value;
        }
        return object;
      } else {
        return pieces;
      }
    };

    Support.clone = function(value) {
      return JSON.parse(JSON.stringify(value));
    };

    Support.toString = function(object) {
      return JSON.stringify(object).replace(/\{(.*)\}/g, '$1').replace(/"/g, '').replace(/\s/g, ',');
    };

    Support.filled = function(keys, filler) {
      var index, key, object, _i, _len;
      object = {};
      for (index = _i = 0, _len = keys.length; _i < _len; index = ++_i) {
        key = keys[index];
        object[key] = filler(key, index);
      }
      return object;
    };

    Support.filledArray = function(n, filler) {
      var array, i, _i;
      array = [];
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        array[i] = filler(i);
      }
      return array;
    };

    Support.type = function(value) {
      var type_;
      if (value !== void 0 && value !== null) {
        type_ = Object.prototype.toString.call(value);
        type_ = type_.substring(8, type_.length - 1);
        if ((type_ === 'Number') && isNaN(value)) {
          return 'NaN';
        } else {
          return type_;
        }
      } else {
        return String(value);
      }
    };

    String.prototype.index = function(substring) {
      var index;
      index = this.indexOf(substring);
      if (index < 0) {
        return null;
      } else {
        return index;
      }
    };

    if (typeof String.prototype.startsWith !== 'function') {
      String.prototype.startsWith = function(substring) {
        return this.lastIndexOf(substring, 0) === 0;
      };
    }

    String.prototype.endsWith = function(substring) {
      return this.lastIndexOf(substring, 0) + substring.length === this.length;
    };

    String.prototype.setCharAt = function(index, char) {
      if (index >= this.length) {
        return this;
      }
      return "" + (this.substr(0, index)) + char + (this.substr(index + 1));
    };

    texts = ["right:5;top:6", "top:5;right:6", "right: 5 , top:6", "right:5  top:6", "  right : 5 ; top  :  6  ", "4,5,6", "4 , 5 , 6", "4;5;6", "4 ;  5  ; 6", "4 5  6", "right:5 top:6"];

    for (_i = 0, _len = texts.length; _i < _len; _i++) {
      text = texts[_i];
      console.log("" + text + " " + (JSON.stringify(Support.parse(text, js.Dom.arounds))) + ")");
    }

    return Support;

  })();


  /*
  cd "/Users/jan/Documents/workspace/465/3_media/"
  coffee -cwo javascripts/ coffeescripts/
   */

}).call(this);
